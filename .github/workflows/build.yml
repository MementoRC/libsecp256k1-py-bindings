name: build

on:
  push:
    tags:
    - v*
    branches:
    - main
  pull_request:
    branches:
    - main

concurrency:
  group: build-${{ github.head_ref }}
  cancel-in-progress: true

env:
  CIBW_BEFORE_ALL_MACOS: ./.github/scripts/install-macos-build-deps.sh
  CIBW_TEST_COMMAND: >
    python -c
    "from libsecp256k1_py_bindings import PrivateKey;
    a=PrivateKey();
    b=PrivateKey();
    "
  CIBW_TEST_SKIP: "*-macosx_arm64"
  CIBW_SKIP: >
      pp*

jobs:
  test:
    name: Test latest Python
    runs-on: ubuntu-latest

    env:
      PYTHON_VERSION: '3.10'

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Upgrade Python packaging tools
      run: pip install --upgrade pip setuptools wheel

    - name: Show runner information
      run: |
        python --version
        pip --version

    - name: Install dependencies
      run: ./.github/scripts/install-test-deps.sh

    - name: Check style and typing
      run: tox -e lint,typing

  windows-wheels-standard:
    name: Build Windows wheels
    needs:
    - test
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-python@v5

    - name: Install Miniconda
      uses: conda-incubator/setup-miniconda@v3
      # with:
      #   activate-environment: true
      #   environment-file: environment.yml
      #   python-version: ${{ env.PYTHON_VERSION }}

    - name: Build wheels
      uses: pypa/cibuildwheel@v2.16.5
      env:
        CIBW_ARCHS_WINDOWS: "AMD64"
        CIBW_BUILD: "cp312-win_amd64"
        CIBW_BEFORE_ALL_WINDOWS: conda install -c conda-forge pkgconfig libsecp256k1
        CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: bash .github/scripts/repair_windows_wheels.sh {wheel} {dest_dir}
        CIBW_TEST_REQUIRES: pytest pytest-benchmark
        CIBW_TEST_COMMAND: >
          conda install -c conda-forge libsecp256k1 &&
          PYTHONPATH=tests python -m pytest -v {project}/tests/test_ecdsa.py

    - uses: actions/upload-artifact@v3
      with:
        name: artifacts
        path: wheelhouse/*.whl
        if-no-files-found: error


#    - name: Run tests
#      run: tox -e ${PYTHON_VERSION}
#
#    - name: Run benchmarks
#      run: tox -e bench
#
#    - name: Upload coverage
#      run: codecov -X gcov
